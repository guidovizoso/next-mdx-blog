const fs = require('fs');
const path = require('path');
const Module = require('module');
const { promisify } = require('util');

const RSS = require('rss');
const g = require('glob');
const mdx = require('@mdx-js/mdx');
const babel = require('@babel/core');

const glob = promisify(g);

function requireFromStringSync(src, filename) {
  const m = new Module();
  m._compile(src, filename);
  return m.exports;
}

function requireMDXSync(mdxSrc, filename) {
  const jsx = mdx.sync(mdxSrc);
  const transformed = babel.transformSync(jsx, {
    babelrc: false,
    presets: ['@babel/preset-react'],
    plugins: [
      '@babel/plugin-transform-modules-commonjs',
      '@babel/plugin-proposal-object-rest-spread'
    ]
  });
  return requireFromStringSync(transformed.code, filename);
}

function requireMDXFileSync(path) {
  const mdxSrc = fs.readFileSync(path, { encoding: 'utf-8' });
  return requireMDXSync(mdxSrc, path);
}

function readPostMetadata(filePath) {
  const mod = requireMDXFileSync(filePath);
  const { meta } = mod;
  if (!meta.publishDate)
    throw new Error(
      `${filePath} has no 'publishDate' info. If we attempt to generate it could be bad for SEO.`
    );
  let urlPath;
  if (meta.category && meta.slug) urlPath = `/${meta.category}/${meta.slug}`;
  else if (!meta.category && meta.slug) urlPath = `/${meta.slug}`;
  else if (!meta.category && !meta.slug)
    urlPath = JSON.stringify(Math.floor(Math.random() * pow));

  return {
    filePath,
    urlPath,
    title: meta.title || path.basename(filePath),
    publishDate: meta.publishDate || null,
    lastModified: meta.lastModified || null,
    slug: meta.slug || urlPath,
    category: meta.category || null
  };
}

// function generateRSS(posts) {
//   const siteUrl = 'https://hipstersmoothie.com';
//   const feed = new RSS({
//     title: "Andrew Lisowski's blog",
//     // eslint-disable-next-line camelcase
//     site_url: siteUrl
//   });

//   posts.forEach(post => {
//     feed.item({
//       title: post.title,
//       guid: post.urlPath,
//       url: siteUrl + post.urlPath,
//       date: post.publishDate
//     });
//   });

//   return feed.xml({ indent: true });
// }

module.exports = async function(options) {
  const postPaths = await glob('posts/**/*.mdx');
  console.log({ postPaths });
  const now = new Date();

  const posts = postPaths.map(readPostMetadata).map((post, i) => {
    console.log({ post });

    return post;
  });

  const postsJSON = JSON.stringify(posts, null, 2);
  const exportPath = 'posts.js';

  fs.writeFileSync(
    exportPath,
    '// automatically generated by MDXCompass\n' +
      `export default ${postsJSON}\n`
  );

  console.info(`Saved ${posts.length} posts in ${exportPath}`);

  // const rssPath = 'static/rss-feed.xml';
  // const rssXML = generateRSS(posts);

  // fs.writeFileSync(rssPath, rssXML);

  // console.info(`Saved RSS feed to ${rssPath}`);
};
